import { useState } from 'react';
import { adminSupabase } from '@/integrations/supabase/adminClient';
import { useToast } from '@/hooks/use-toast';

/**
 * Hook para opera√ß√µes administrativas
 * USA APENAS o banco administrativo central
 */
export const useAdminOperations = () => {
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  /**
   * Buscar todas as cl√≠nicas centrais com estat√≠sticas
   */
  const fetchClinicasWithStats = async () => {
    try {
      setLoading(true);
      console.log('üîç Buscando cl√≠nicas com estat√≠sticas no banco administrativo central...');
      
      // Por enquanto, buscar cl√≠nicas simples at√© termos a fun√ß√£o criada
      const { data, error } = await adminSupabase
        .from('clinicas_central')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      
      console.log('‚úÖ Cl√≠nicas carregadas:', data?.length);
      return data || [];
    } catch (error) {
      console.error('‚ùå Erro ao buscar cl√≠nicas com estat√≠sticas:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel carregar as estat√≠sticas das cl√≠nicas.",
        variant: "destructive"
      });
      return [];
    } finally {
      setLoading(false);
    }
  };

  /**
   * Buscar cl√≠nicas Inovai
   */
  const fetchClinicasInovai = async () => {
    try {
      setLoading(true);
      console.log('üîç Buscando cl√≠nicas Inovai no banco administrativo central...');
      
      const { data, error } = await (adminSupabase as any)
        .from('clinicas_inovai')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      
      console.log('‚úÖ Cl√≠nicas Inovai carregadas:', data?.length);
      return data || [];
    } catch (error) {
      console.error('‚ùå Erro ao buscar cl√≠nicas Inovai:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel carregar as cl√≠nicas Inovai.",
        variant: "destructive"
      });
      return [];
    } finally {
      setLoading(false);
    }
  };

  /**
   * Criar nova cl√≠nica no banco administrativo central
   */
  const createClinicaInovai = async (clinicaData: any) => {
    try {
      setLoading(true);
      console.log('üìù Criando cl√≠nica Inovai no banco administrativo central...');
      
      const { data, error } = await (adminSupabase as any)
        .from('clinicas_inovai')
        .insert([clinicaData])
        .select()
        .single();

      if (error) throw error;
      
      console.log('‚úÖ Cl√≠nica Inovai criada:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao criar cl√≠nica Inovai:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel criar a cl√≠nica Inovai.",
        variant: "destructive"
      });
      throw error;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Atualizar cl√≠nica Inovai
   */
  const updateClinicaInovai = async (id: string, updates: any) => {
    try {
      setLoading(true);
      console.log('üìù Atualizando cl√≠nica Inovai no banco administrativo central...');
      
      const { data, error } = await (adminSupabase as any)
        .from('clinicas_inovai')
        .update(updates)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;
      
      console.log('‚úÖ Cl√≠nica Inovai atualizada:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao atualizar cl√≠nica Inovai:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel atualizar a cl√≠nica Inovai.",
        variant: "destructive"
      });
      throw error;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Deletar cl√≠nica Inovai
   */
  const deleteClinicaInovai = async (id: string) => {
    try {
      setLoading(true);
      console.log('üóëÔ∏è Removendo cl√≠nica Inovai do banco administrativo central...');
      
      const { error } = await (adminSupabase as any)
        .from('clinicas_inovai')
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      console.log('‚úÖ Cl√≠nica Inovai removida');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao remover cl√≠nica Inovai:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel remover a cl√≠nica Inovai.",
        variant: "destructive"
      });
      throw error;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Buscar logs administrativos
   */
  const fetchAdminLogs = async (limit = 100) => {
    try {
      setLoading(true);
      console.log('üîç Buscando logs administrativos...');
      
      const { data, error } = await (adminSupabase as any)
        .from('admin_operacoes_log')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(limit);

      if (error) throw error;
      
      console.log('‚úÖ Logs administrativos carregados:', data?.length);
      return data || [];
    } catch (error) {
      console.error('‚ùå Erro ao buscar logs administrativos:', error);
      return [];
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    fetchClinicasWithStats,
    fetchClinicasInovai,
    createClinicaInovai,
    updateClinicaInovai,
    deleteClinicaInovai,
    fetchAdminLogs
  };
};